import java.time.format.DateTimeFormatter

> val TopDateFormatter = DateTimeFormatter.ofPattern("LLL dd yyyy").withZone(java.time.ZoneId.systemDefault())
> val EndDateFormatter = DateTimeFormatter.ISO_LOCAL_DATE.withZone(java.time.ZoneId.systemDefault())

val presentationTypeClass =
  s"presentation-${input.presentation.toString().toLowerCase}"

given PageBase = PageBase.fromPage(input.renderLocation)

val permalinkLoc = input.sourceEntry.permalink

val datePart = "on " + EndDateFormatter.format(input.sourceEntry.entryInfo.pubDate)
val publishedLine =
  if input.sourceEntry.entryInfo.authors.isEmpty then
    "Published " + datePart
  else
    s"""Published by ${input.sourceEntry.entryInfo.authors.mkString(", ")} """ + datePart
end publishedLine

(input : Layout.Input.Entry)[]~()>
      <article>
<()
import input.blog.Entry.Presentation
()>
        <div class="article-header <( presentationTypeClass )>">
<()
if input.presentation != Presentation.Rss then {
()>
          <div class="article-top-date">
            <( TopDateFormatter.format(input.sourceEntry.entryInfo.pubDate) )>
          </div>
<()
  input.sourceEntry.entryInfo.mbTitle.foreach { title =>
()>
          <h1><a class="permalink" href="<( permalinkLoc.relative )>"><( title )></a></h1>
<()
  }
}
()>
        </div>
        <div class="article-body">
          <( input.articleContentHtml )>
        </div>
        <div class="article-footer">
          <a class="permalink" href="<( permalinkLoc.relative )>"><( publishedLine )></a>
        </div>
      </article>

